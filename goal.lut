@@ goal.lut - Example of what a full-featured Lüt language could look like
@@ This is a todo list application that demonstrates various language features

@@ Import statements for modules
@@ Takes some inspiration from langs like Go
-import 'std/io'        @@ Standard I/O utilities
-import 'std/datetime'  @@ Date and time utilities
-import 'std/fs'        @@ File system operations
-import 'std/json'      @@ JSON parsing and serialization

@@ Constants declaration
APP_NAME : -const 'Todo Manager'
VERSION : -const 1.0
DATA_FILE : -const 'todos.json'
@@ or
-const APP_NAME = 'Todo Manager'
-const VERSION = 1.0
-const DATA_FILE = 'todos.json'

@@ Type definitions using structs
-struct Todo
  id : -number           @@ Todo ID
  title : -text          @@ Todo title
  description : -text    @@ Todo description
  created : -datetime    @@ Creation timestamp
  due : -datetime?       @@ Optional due date
  completed : -bool      @@ Completion status
  tags : -list<-text>    @@ List of tags
-end

@@ TodoManager struct with associated functions
-struct TodoManager
  todos : -list<Todo>    @@ List of todos
  next_id : -number      @@ Next available ID
-end

@@ Functions for TodoManager operations
-func create_todo_manager
  manager : -new TodoManager
  manager.todos : -list []
  manager.next_id : -number 1

  @@ Try to load existing todos
  -if -fs.exists $DATA_FILE
    -try
      file_content : -fs.read_file $DATA_FILE
      loaded_data : -json.parse $file_content
      manager.todos : -json.to_todos $loaded_data

      @@ Find the highest ID to set next_id
      max_id : -number 0
      -for todo in $manager.todos
        -if $todo.id > $max_id
          max_id : -set $todo.id
        -end
      -end
      manager.next_id : $max_id + 1
    -catch error
      -io.println 'Error loading todos: ', $error
      manager.todos : -list []
    -end
  -end
  
  -return $manager
-end

@@ Function to add a new todo
-func add_todo $manager, $title, $description, $tags, $due_date?
  new_todo : -new Todo
  new_todo.id : -set $manager.next_id
  new_todo.title : -set $title
  new_todo.description : -set $description
  new_todo.created : -datetime.now
  new_todo.completed : -bool false

  @@ Handle optional due date
  -if $due_date
    new_todo.due : -set $due_date
  -end

  @@ Handle tags
  -if $tags
    new_todo.tags : -set $tags
  -else
    new_todo.tags : -list []
  -end

  @@ Add the todo to the list
  manager.todos : -append $manager.todos, $new_todo
  manager.next_id : $manager.next_id + 1

  @@ Save todos to file
  -save_todos $manager

  -return $new_todo.id
-end

@@ Function to mark a todo as complete
-func complete_todo $manager, $id
  found : -bool false

  @@ Find and update the todo
  -for i, todo in -enumerate $manager.todos
    -if $todo.id == $id
      found : -bool true
      manager.todos[i].completed : -bool true
      -break
    -end
  -end

  @@ If found, save changes
  -if $found
    -save_todos $manager
    -return -bool true
  -else
    -return -bool false
  -end
-end

@@ Function to delete a todo
-func delete_todo $manager, $id
  initial_length : -len $manager.todos
  manager.todos : -filter $manager.todos, -func $todo -> $todo.id != $id

  @@ Check if any todo was removed
  -if -len $manager.todos != $initial_length
    -save_todos $manager
    -return -bool true
  -else
    -return -bool false
  -end
-end

@@ Function to list todos with optional filtering
-func list_todos $manager, $completed?
  filtered_todos : -list []

  @@ Apply filter if specified
  -if -is_defined $completed
    filtered_todos : -filter $manager.todos, -func $todo -> $todo.completed == $completed
  -else
    filtered_todos : -set $manager.todos
  -end

  @@ Return the filtered list
  -return $filtered_todos
-end

@@ Function to find todos by tag
-func find_by_tag $manager, $tag
  matching_todos : -filter $manager.todos, -func $todo -> $todo.tags.contains($tag)
  -return $matching_todos
-end

@@ Function to save todos to file
-func save_todos $manager
  json_data : -json.from_todos $manager.todos
  serialized : -json.stringify $json_data, -bool true  @@ Pretty print
  -fs.write_file $DATA_FILE, $serialized
-end

@@ Helper functions for formatting
-func format_todo $todo
  status : -if $todo.completed -then '[✓]' -else '[ ]'

  @@ Format the created date
  created_str : -datetime.format $todo.created, 'YYYY-MM-DD HH:mm'

  @@ Format the due date if it exists
  due_str : ''
  -if $todo.due
    due_str : ' (Due: ' + -datetime.format $todo.due, 'YYYY-MM-DD HH:mm' + ')'
  -end

  @@ Format tags
  tags_str : ''
  -if -len $todo.tags > 0
    tags_str : ' [' + -join $todo.tags, ', ' + ']'
  -end

  @@ Combine all parts using string concatenation
  result : $status + ' #' + $todo.id + ': ' + $todo.title +
           $due_str + $tags_str + '\n    ' + $todo.description +
           '\n    Created: ' + $created_str

  -return $result
-end

@@ Main function
-func main
  @@ Print welcome message
  -io.println '=== ', $APP_NAME, ' v', $VERSION, ' ==='

  @@ Create todo manager
  manager : -create_todo_manager

  @@ Main application loop
  running : -bool true
  -while $running
    @@ Display menu
    -io.println '\nOptions:'
    -io.println '1. List all todos'
    -io.println '2. List pending todos'
    -io.println '3. List completed todos'
    -io.println '4. Add new todo'
    -io.println '5. Complete a todo'
    -io.println '6. Delete a todo'
    -io.println '7. Search by tag'
    -io.println '0. Exit'

    @@ Get user choice
    -io.print '\nEnter your choice: '
    choice : -io.read_line
    choice_num : -number $choice

    @@ Process user choice using switch statement
    -switch $choice_num
      -case 0
        running : -bool false
        -io.println 'Goodbye!'

      -case 1
        -io.println '\nAll Todos:'
        todos : -list_todos $manager
        -display_todos $todos

      -case 2
        -io.println '\nPending Todos:'
        todos : -list_todos $manager, -bool false
        -display_todos $todos

      -case 3
        -io.println '\nCompleted Todos:'
        todos : -list_todos $manager, -bool true
        -display_todos $todos

      -case 4
        -add_todo_flow $manager

      -case 5
        -complete_todo_flow $manager

      -case 6
        -delete_todo_flow $manager

      -case 7
        -search_by_tag_flow $manager

      -default
        -io.println 'Invalid choice, please try again.'
    -end
  -end
-end

@@ Helper functions for UI flows
-func display_todos $todos
  -if -len $todos == 0
    -io.println 'No todos found.'
    -return
  -end

  -for todo in $todos
    formatted : -format_todo $todo
    -io.println $formatted
    -io.println '------------------------'
  -end
-end

-func add_todo_flow $manager
  @@ Get todo details from user
  -io.print 'Enter title: '
  title : -io.read_line

  -io.print 'Enter description: '
  description : -io.read_line

  -io.print 'Enter tags (comma separated, leave blank for none): '
  tags_input : -io.read_line

  @@ Process tags
  tags : -list []
  -if $tags_input != ''
    tags_split : -split $tags_input, ','
    -for tag in $tags_split
      clean_tag : -trim $tag
      -if $clean_tag != ''
        tags : -append $tags, $clean_tag
      -end
    -end
  -end

  @@ Ask for due date
  -io.print 'Add due date? (y/n): '
  due_response : -io.read_line

  due_date : -none
  -if $due_response == 'y' || $due_response == 'Y'
    valid_date : -bool false
    -while !$valid_date
      -io.print 'Enter due date (YYYY-MM-DD HH:mm): '
      date_input : -io.read_line

      -try
        due_date : -datetime.parse $date_input, 'YYYY-MM-DD HH:mm'
        valid_date : -bool true
      -catch error
        -io.println 'Invalid date format. Please try again.'
      -end
    -end
  -end

  @@ Add todo and confirm
  todo_id : -add_todo $manager, $title, $description, $tags, $due_date
  -io.println 'Todo added with ID: ', $todo_id
-end

-func complete_todo_flow $manager
  @@ Get list of pending todos
  pending_todos : -list_todos $manager, -bool false

  -if -len $pending_todos == 0
    -io.println 'No pending todos to complete.'
    -return
  -end

  @@ Display pending todos
  -io.println '\nPending Todos:'
  -display_todos $pending_todos

  @@ Ask for ID to complete
  -io.print 'Enter ID of todo to mark as completed: '
  id_input : -io.read_line

  -try
    id : -number $id_input
    result : -complete_todo $manager, $id

    -if $result
      -io.println 'Todo marked as completed.'
    -else
      -io.println 'Todo not found.'
    -end
  -catch error
    -io.println 'Invalid ID. Please enter a number.'
  -end
-end

-func delete_todo_flow $manager
  @@ Display all todos
  todos : -list_todos $manager

  -if -len $todos == 0
    -io.println 'No todos to delete.'
    -return
  -end

  @@ Display todos
  -io.println '\nAll Todos:'
  -display_todos $todos

  @@ Ask for ID to delete
  -io.print 'Enter ID of todo to delete: '
  id_input : -io.read_line

  -try
    id : -number $id_input

    @@ Confirm deletion
    -io.print 'Are you sure you want to delete this todo? (y/n): '
    confirm : -io.read_line

    -if $confirm == 'y' || $confirm == 'Y'
      result : -delete_todo $manager, $id

      -if $result
        -io.println 'Todo deleted.'
      -else
        -io.println 'Todo not found.'
      -end
    -else
      -io.println 'Deletion cancelled.'
    -end
  -catch error
    -io.println 'Invalid ID. Please enter a number.'
  -end
-end

-func search_by_tag_flow $manager
  @@ Ask for tag to search
  -io.print 'Enter tag to search for: '
  tag : -io.read_line

  @@ Search and display results
  matching_todos : -find_by_tag $manager, $tag

  -io.println '\nTodos with tag "', $tag, '":'
  -display_todos $matching_todos
-end

@@ Call the main function to start the application
-call main
