diff --git a/src/compiler.rs b/src/compiler.rs
index xxxx..xxxx 100644
--- a/src/compiler.rs
+++ b/src/compiler.rs
@@ -244,7 +244,7 @@ impl<'ctx> LLVMCompiler<'ctx> {
                     self.functions.insert(name.clone(), function);
                 } else {
                     // Create parameter types
-                    let mut param_types = Vec::with_capacity(parameters.len());
+                    let mut param_types = Vec::with_capacity(parameters.len() + 1);
                     for _ in parameters {
                         // All parameters are i64 for now (we can add more types later)
                         param_types.push(self.i64_type.into());
@@ -1198,7 +1198,7 @@ impl<'ctx> LLVMCompiler<'ctx> {
                         match self.variable_types.get(&var_name) {
                             Some(VariableType::Integer) | Some(VariableType::Boolean) | Some(VariableType::Float) => {
                                 // Load as integer value (float is treated as integer for now)
-                                let int_load = self.builder.build_load(self.i64_type, ptr_val, &format!("{}_int", var_name)).unwrap();
+                                let int_load = self.builder.build_load(self.i64_type, ptr_val, &var_name).unwrap();
                                 Ok(int_load)
                             },
                             Some(VariableType::String) => {
@@ -1913,13 +1913,13 @@ impl<'ctx> LLVMCompiler<'ctx> {
     }
     
     // Helper to create an i64 alloca instruction in the entry block
-    fn create_entry_block_alloca(&self, name: &str) -> PointerValue<'ctx> {
+    fn create_entry_block_alloca(&self, name: &str) -> PointerValue<'ctx> {
         let func = self.builder.get_insert_block().unwrap().get_parent().unwrap();
         let entry = func.get_first_basic_block().unwrap();
         
         match entry.get_first_instruction() {
             Some(first_instr) => {
-                let builder = self.context.create_builder();
+                let builder = self.context.create_builder();
                 builder.position_before(&first_instr);
                 builder.build_alloca(self.i64_type, name).unwrap()
             }
@@ -1927,7 +1927,7 @@ impl<'ctx> LLVMCompiler<'ctx> {
                 let current_block = self.builder.get_insert_block().unwrap();
                 let builder = self.context.create_builder();
                 builder.position_at_end(entry);
-                let alloca = builder.build_alloca(self.i64_type, name).unwrap();
+                let alloca = builder.build_alloca(self.i64_type, name).unwrap();
                 self.builder.position_at_end(current_block);
                 alloca
             }